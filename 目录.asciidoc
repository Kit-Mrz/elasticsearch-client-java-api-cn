[[java-api]]
= Java API

include::../Versions.asciidoc[]

[preface]
== 前言
本节描述了 Elasticsearch 提供的 Java API. 所有的 Elasticsearch 操作都是使用一个
<<client,Client>> 对象来执行的. 所有的操作本质上都是完全异步的 (要么接受一个监听器, 要么返回一个 future).

另外, 一个客户端上的操作可以累积起来以 <<java-docs-bulk,批量>> 的方式执行.

注意: 所有的 API 都是通过 Java API 暴露的(实际上, Elasticsearch 内部使用 Java API 来执行操作).


== Maven仓库

Elasticsearch 托管在
http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22elasticsearch%22[Maven
中央仓库]中.

例如, 你可以在 `pom.xml` 文件中声明最新版本的依赖:

["source","xml"]
--------------------------------------------------
<dependency>
    <groupId>org.elasticsearch.client</groupId>
    <artifactId>transport</artifactId>
    <version>5.2.1</version>
</dependency>
--------------------------------------------------

=== Log4j 2 日志记录器

你需要把 Log4j 2 依赖也包含进来:

["source","xml"]
--------------------------------------------------
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-api</artifactId>
    <version>2.7</version>
</dependency>

<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.7</version>
</dependency>
--------------------------------------------------

你还需要在你的类路径中提供一个 Log4j 2 配置文件.
例如, 你可以在 `src/main/resources` 这个工程目录下添加一个 `log4j2.properties` 文件, 内容如下:


["source","properties"]
--------------------------------------------------
appender.console.type = Console
appender.console.name = console
appender.console.layout.type = PatternLayout

rootLogger.level = info
rootLogger.appenderRef.console.ref = console
--------------------------------------------------

=== 使用其它日志记录器

如果你想要使用其它的日志记录器, 可以使用 http://www.slf4j.org/[SLF4J] 桥接器来实现:

["source","xml"]
--------------------------------------------------
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-to-slf4j</artifactId>
    <version>2.7</version>
</dependency>

<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.21</version>
</dependency>
--------------------------------------------------

http://www.slf4j.org/manual.html[SLF4J用户手册] 这篇文章中列举出了你可以使用的所有日志实现. 选择你最喜欢的日志记录器并
将其作为依赖添加进来. 举个例子, 我们将使用 `slf4j-simple` 这个日志记录器:

["source","xml"]
--------------------------------------------------
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-simple</artifactId>
    <version>1.7.21</version>
</dependency>
--------------------------------------------------


== 解决JAR包依赖冲突

如果你想要在你的 Java 应用程序中使用 Elasticsearch, 你可能需要处理与 Guava 和 Joda 这样的第三方依赖之间的版本冲突. 例如 Elasticsearch 可能使用的是 Joda 2.8, 而你的代码中使用的是 Joda 2.1.

你有两个选择:

* 最简单的解决方案就是升级. 较新的模块版本通常会解决一些老版本的 bug. 如果你的版本落后的比较远, 那么以后升级就会更加困难. 当然, 有可能你使用了
一个第三方依赖, 它反过来依赖于一个已过时版本的包, 这样也会阻止你的升级.

* 第二个选项是重新安置冲突的依赖, 并且使用自己的应用程序或者是 Elasticsearch 以及 Elasticsearch 客户端所依赖的任何插件来隐藏它们.

https://www.elastic.co/blog/to-shade-or-not-to-shade["隐藏或不隐藏"这篇博客] 描述了这样做的所有步骤.

== 将依赖嵌入jar包中

如果你想创建一个包含你应用程序代码和所有依赖的 jar 包, 请不要使用 `maven-assembly-plugin` 插件, 因为它无法处理 Lucene jar 包
所要求的 `META-INF/services` 结构.

相反, 你可以使用 `maven-shade-plugin` 插件并使用如下配置:

[source,xml]
--------------------------------------------------
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-shade-plugin</artifactId>
    <version>2.4.1</version>
    <executions>
        <execution>
            <phase>package</phase>
            <goals><goal>shade</goal></goals>
            <configuration>
                <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                </transformers>
            </configuration>
        </execution>
    </executions>
</plugin>
--------------------------------------------------

注意: 如果你想在运行 `java -jar yourjar.jar` 命令时自动调用一个 `main` 类, 你只需要将其添加到 `transformers` 元素中:

[source,xml]
--------------------------------------------------
<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
    <mainClass>org.elasticsearch.demo.Generate</mainClass>
</transformer>
--------------------------------------------------


== 部署到 JBoss EAP6 模块中

Elasticsearch 和 Lucene 类必须要部署到同一个 JBoss 模块中.

你可以定义一个 `module.xml` 文件, 内容如下:

[source,xml]
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.1" name="org.elasticsearch">
  <resources>
    <!-- Elasticsearch -->
    <resource-root path="elasticsearch-2.0.0.jar"/>
    <!-- Lucene -->
    <resource-root path="lucene-core-5.1.0.jar"/>
    <resource-root path="lucene-analyzers-common-5.1.0.jar"/>
    <resource-root path="lucene-queries-5.1.0.jar"/>
    <resource-root path="lucene-memory-5.1.0.jar"/>
    <resource-root path="lucene-highlighter-5.1.0.jar"/>
    <resource-root path="lucene-queryparser-5.1.0.jar"/>
    <resource-root path="lucene-sandbox-5.1.0.jar"/>
    <resource-root path="lucene-suggest-5.1.0.jar"/>
    <resource-root path="lucene-misc-5.1.0.jar"/>
    <resource-root path="lucene-join-5.1.0.jar"/>
    <resource-root path="lucene-grouping-5.1.0.jar"/>
    <resource-root path="lucene-spatial-5.1.0.jar"/>
    <resource-root path="lucene-expressions-5.1.0.jar"/>
    <!-- Insert other resources here -->
  </resources>

  <dependencies>
    <module name="sun.jdk" export="true" >
        <imports>
            <include path="sun/misc/Unsafe" />
        </imports>
    </module>
    <module name="org.apache.log4j"/>
    <module name="org.apache.commons.logging"/>
    <module name="javax.api"/>
  </dependencies>
</module>
--------------------------------------------------


include::客户端.asciidoc[]

include::文档.asciidoc[]

include::搜索.asciidoc[]

include::聚合.asciidoc[]

include::查询DSL.asciidoc[]

include::索引脚本.asciidoc[]

include::admin_cn/index.asciidoc[]
