[[java-docs-update]]
=== 更新API


你可以创建一个 `UpdateRequest` 对象并将其发送给客户端:

[source,java]
--------------------------------------------------
UpdateRequest updateRequest = new UpdateRequest();
updateRequest.index("index");
updateRequest.type("type");
updateRequest.id("1");
updateRequest.doc(jsonBuilder()
        .startObject()
            .field("gender", "male")
        .endObject());
client.update(updateRequest).get();
--------------------------------------------------

或者你也可以使用 `prepareUpdate()` 方法:

[source,java]
--------------------------------------------------
client.prepareUpdate("ttl", "doc", "1")
        .setScript(new Script("ctx._source.gender = \"male\"" <1> , ScriptService.ScriptType.INLINE, null, null))
        .get();

client.prepareUpdate("ttl", "doc", "1")
        .setDoc(jsonBuilder()               <2>
            .startObject()
                .field("gender", "male")
            .endObject())
        .get();
--------------------------------------------------
<1> 你的脚本. 它也可以是一个本地存储的脚本名称. 在这种情况下, 你需要使用 `ScriptService.ScriptType.FILE`.
<2> 将要合并到现有文档的一个文档.

请注意, 你不能同时提供 `script` 和 `doc`.

[[java-docs-update-api-script]]
==== 通过脚本更新

更新 API 允许基于用户所提供的脚本来更新文档:

[source,java]
--------------------------------------------------
UpdateRequest updateRequest = new UpdateRequest("ttl", "doc", "1")
        .script(new Script("ctx._source.gender = \"male\""));
client.update(updateRequest).get();
--------------------------------------------------


[[java-docs-update-api-merge-docs]]
==== 通过合并文档进行更新

更新 API 还支持传递部分文档, 它将合并到现有的文档中(简单递归合并, 对象的内部合并, 替换核心的键值对和数组). 例如:

[source,java]
--------------------------------------------------
UpdateRequest updateRequest = new UpdateRequest("index", "type", "1")
        .doc(jsonBuilder()
            .startObject()
                .field("gender", "male")
            .endObject());
client.update(updateRequest).get();
--------------------------------------------------


[[java-docs-update-api-upsert]]
==== Upsert

还支持`upsert`. 如果文档不存在, `upsert` 元素的内容将会用于索引新的文档:

[source,java]
--------------------------------------------------
IndexRequest indexRequest = new IndexRequest("index", "type", "1")
        .source(jsonBuilder()
            .startObject()
                .field("name", "Joe Smith")
                .field("gender", "male")
            .endObject());
UpdateRequest updateRequest = new UpdateRequest("index", "type", "1")
        .doc(jsonBuilder()
            .startObject()
                .field("gender", "male")
            .endObject())
        .upsert(indexRequest);              <1>
client.update(updateRequest).get();
--------------------------------------------------
<1> 如果文档不存在, `indexRequest` 中的文档将会被添加进来

如果文档 `index/type/1` 已经存在, 那么在该操作之后我们将会有一个像下面这样的文档:

[source,js]
--------------------------------------------------
{
    "name"  : "Joe Dalton",
    "gender": "male"        <1>
}
--------------------------------------------------
// NOTCONSOLE
<1> 该字段由更新请求添加

如果它不存在, 那么我们将会有一个新的文档:

[source,js]
--------------------------------------------------
{
    "name" : "Joe Smith",
    "gender": "male"
}
--------------------------------------------------
// NOTCONSOLE
